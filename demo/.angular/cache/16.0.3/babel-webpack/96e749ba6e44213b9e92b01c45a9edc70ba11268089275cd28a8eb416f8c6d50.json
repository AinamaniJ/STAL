{"ast":null,"code":"import { FormGroup, FormControl, Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"@angular/material/button\";\nimport * as i3 from \"@angular/material/card\";\nimport * as i4 from \"@angular/material/input\";\nimport * as i5 from \"@angular/material/form-field\";\nimport * as i6 from \"@angular/forms\";\nimport * as i7 from \"@angular/material/icon\";\nfunction LoginComponent_mat_error_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \"Required Email Adress\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginComponent_mat_error_22_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \"Required Password\");\n    i0.ɵɵelementEnd();\n  }\n}\nclass LoginComponent {\n  constructor() {\n    this.hide = false;\n    this.loginForm = new FormGroup({\n      email: new FormControl('', [Validators.required, Validators.email]),\n      password: new FormControl('', [Validators.required, Validators.minLength(6)])\n    });\n  }\n  ngOnInit() {\n    // Other initialization code\n  }\n  onLogin() {\n    if (this.loginForm.valid) {\n      const email = this.loginForm.value.email;\n      const password = this.loginForm.value.password;\n      // Implement your login logic here\n    }\n  }\n}\n\nLoginComponent.ɵfac = function LoginComponent_Factory(t) {\n  return new (t || LoginComponent)();\n};\nLoginComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: LoginComponent,\n  selectors: [[\"app-login\"]],\n  decls: 25,\n  vars: 7,\n  consts: [[1, \"header\"], [\"name\", \"loginForm\", 3, \"formGroup\", \"ngSubmit\"], [1, \"email-input\"], [\"appearance\", \"outline\", 1, \"full-width\"], [\"formControlName\", \"email\", \"matInput\", \"\", \"required\", \"\"], [4, \"ngIf\"], [1, \"alink\"], [\"appearance\", \"outline\", 1, \"fullwidth\"], [\"formControlName\", \"password\", \"matInput\", \"\", \"required\", \"\", 3, \"type\"], [\"mat-icon-button\", \"\", \"matSuffix\", \"\", 3, \"click\"], [\"mat-flat-button\", \"\", \"color\", \"primary\"]],\n  template: function LoginComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"mat-card\")(1, \"mat-card-content\")(2, \"div\", 0)(3, \"h2\");\n      i0.ɵɵtext(4, \"Login\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(5, \"form\", 1);\n      i0.ɵɵlistener(\"ngSubmit\", function LoginComponent_Template_form_ngSubmit_5_listener() {\n        return ctx.onLogin();\n      });\n      i0.ɵɵelementStart(6, \"div\", 2)(7, \"mat-form-field\", 3)(8, \"mat-label\");\n      i0.ɵɵtext(9, \"Email\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(10, \"input\", 4);\n      i0.ɵɵtemplate(11, LoginComponent_mat_error_11_Template, 2, 0, \"mat-error\", 5);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(12, \"div\")(13, \"span\", 6);\n      i0.ɵɵtext(14, \"forgot password\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(15, \"mat-form-field\", 7)(16, \"mat-label\");\n      i0.ɵɵtext(17, \"Password\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(18, \"input\", 8);\n      i0.ɵɵelementStart(19, \"button\", 9);\n      i0.ɵɵlistener(\"click\", function LoginComponent_Template_button_click_19_listener() {\n        return ctx.hide = !ctx.hide;\n      });\n      i0.ɵɵelementStart(20, \"mat-icon\");\n      i0.ɵɵtext(21);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵtemplate(22, LoginComponent_mat_error_22_Template, 2, 0, \"mat-error\", 5);\n      i0.ɵɵelementStart(23, \"button\", 10);\n      i0.ɵɵtext(24, \"Login\");\n      i0.ɵɵelementEnd()()()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"formGroup\", ctx.loginForm);\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"ngIf\", ctx.loginForm.get(\"email\").errors == null ? null : ctx.loginForm.get(\"email\").errors[\"required\"]);\n      i0.ɵɵadvance(7);\n      i0.ɵɵproperty(\"type\", ctx.hide ? \"password\" : \"text\");\n      i0.ɵɵadvance(1);\n      i0.ɵɵattribute(\"aria-label\", \"Hide Password\")(\"aria-pressed\", ctx.Hide);\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate(ctx.hide ? \"visibility_off\" : \"visibility\");\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.loginForm.get(\"email\").errors == null ? null : ctx.loginForm.get(\"email\").errors[\"required\"]);\n    }\n  },\n  dependencies: [i1.NgIf, i2.MatButton, i2.MatIconButton, i3.MatCard, i3.MatCardContent, i4.MatInput, i5.MatFormField, i5.MatLabel, i5.MatError, i5.MatSuffix, i6.ɵNgNoValidate, i6.DefaultValueAccessor, i6.NgControlStatus, i6.NgControlStatusGroup, i6.RequiredValidator, i6.FormGroupDirective, i6.FormControlName, i7.MatIcon],\n  styles: [\"mat-card[_ngcontent-%COMP%] {\\n  max-width: 600px;\\n  margin: 2em auto;\\n  text-align: center;\\n  max-height: 600px;\\n}\\n\\n.header[_ngcontent-%COMP%] {\\n  text-align: center;\\n}\\n\\n.full-width[_ngcontent-%COMP%] {\\n  width: 80%;\\n}\\n\\n.forgot-password[_ngcontent-%COMP%] {\\n  padding-left: 0px;\\n}\\n\\n.email-input[_ngcontent-%COMP%] {\\n  padding-top: 10px;\\n}\\n\\n.aLink[_ngcontent-%COMP%] {\\n  float: right;\\n  padding-right: 60px;\\n  text-decoration: none;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvbG9naW4vbG9naW4uY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDSSxnQkFBQTtFQUNBLGdCQUFBO0VBQ0Esa0JBQUE7RUFDQSxpQkFBQTtBQUNKOztBQUdBO0VBQ0ksa0JBQUE7QUFBSjs7QUFFQTtFQUNJLFVBQUE7QUFDSjs7QUFDQTtFQUNJLGlCQUFBO0FBRUo7O0FBQUE7RUFDSSxpQkFBQTtBQUdKOztBQURBO0VBQ0ksWUFBQTtFQUNBLG1CQUFBO0VBQ0EscUJBQUE7QUFJSiIsInNvdXJjZXNDb250ZW50IjpbIm1hdC1jYXJke1xyXG4gICAgbWF4LXdpZHRoOiA2MDBweDtcclxuICAgIG1hcmdpbjogMmVtIGF1dG87XHJcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgICBtYXgtaGVpZ2h0OiA2MDBweDtcclxuXHJcbn1cclxuXHJcbi5oZWFkZXJ7XHJcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbn1cclxuLmZ1bGwtd2lkdGh7XHJcbiAgICB3aWR0aDogODAlO1xyXG59XHJcbi5mb3Jnb3QtcGFzc3dvcmR7XHJcbiAgICBwYWRkaW5nLWxlZnQ6IDBweDtcclxufVxyXG4uZW1haWwtaW5wdXR7XHJcbiAgICBwYWRkaW5nLXRvcDogMTBweDtcclxufVxyXG4uYUxpbmt7XHJcbiAgICBmbG9hdDogcmlnaHQ7XHJcbiAgICBwYWRkaW5nLXJpZ2h0OiA2MHB4O1xyXG4gICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xyXG59Il0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n});\nexport { LoginComponent };","map":{"version":3,"names":["FormGroup","FormControl","Validators","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","LoginComponent","constructor","hide","loginForm","email","required","password","minLength","ngOnInit","onLogin","valid","value","selectors","decls","vars","consts","template","LoginComponent_Template","rf","ctx","ɵɵlistener","LoginComponent_Template_form_ngSubmit_5_listener","ɵɵelement","ɵɵtemplate","LoginComponent_mat_error_11_Template","LoginComponent_Template_button_click_19_listener","LoginComponent_mat_error_22_Template","ɵɵadvance","ɵɵproperty","get","errors","ɵɵattribute","Hide","ɵɵtextInterpolate"],"sources":["C:\\Users\\Kimz\\Videos\\angular\\demo\\src\\app\\login\\login.component.ts","C:\\Users\\Kimz\\Videos\\angular\\demo\\src\\app\\login\\login.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent implements OnInit {\n  loginForm: FormGroup;\n  hide: boolean = false;\n  constructor() {\n    \n    this.loginForm = new FormGroup({\n      email: new FormControl('', [Validators.required, Validators.email]),\n      password: new FormControl('', [Validators.required, Validators.minLength(6)])\n    });\n  }\n\n  ngOnInit() {\n    // Other initialization code\n  }\n\n  onLogin() {\n    if (this.loginForm.valid) {\n      const email = this.loginForm.value.email;\n      const password = this.loginForm.value.password;\n      // Implement your login logic here\n    }\n  }\n}\n","<mat-card>\n    <mat-card-content>\n        <div class=\"header\">\n            <h2>Login</h2>\n        </div>\n        <form (ngSubmit)=\"onLogin()\" name=\"loginForm\" [formGroup]=\"loginForm\">\n            <div class=\"email-input\">\n                <mat-form-field class=\"full-width\" appearance=\"outline\">\n                    <mat-label>Email</mat-label>\n                    <input formControlName = \"email\" matInput required>\n                    <mat-error *ngIf=\"loginForm.get('email').errors?.['required']\">Required Email Adress</mat-error>\n                </mat-form-field>\n            </div>\n            <div>\n                <span class=\"alink\">forgot password</span>\n                <mat-form-field class=\"fullwidth\" appearance=\"outline\">\n                    <mat-label>Password</mat-label>\n                    <input formControlName=\"password\" matInput [type]=\"hide ? 'password' : 'text'\" required >\n                    <button mat-icon-button matSuffix (click)=\"hide = !hide\" [attr.aria-label] = \"'Hide Password'\" [attr.aria-pressed] = \"Hide\">\n\n                        <mat-icon>{{ hide ? 'visibility_off' : 'visibility'}}</mat-icon>\n                    </button>\n                    <mat-error *ngIf=\"loginForm.get('email').errors?.['required']\">Required Password</mat-error>\n                    <button mat-flat-button color=\"primary\">Login</button>\n                </mat-form-field>\n            </div>\n        </form>\n    </mat-card-content>\n</mat-card>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}