{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/material/button\";\nimport * as i5 from \"@angular/material/card\";\nimport * as i6 from \"@angular/material/input\";\nimport * as i7 from \"@angular/material/form-field\";\nimport * as i8 from \"@angular/material/toolbar\";\nfunction CreatepasswordComponent_mat_error_16_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \"Password is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction CreatepasswordComponent_mat_error_17_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"Password must have at least \", ctx_r1.minPw, \" characters\");\n  }\n}\nfunction CreatepasswordComponent_mat_error_20_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \"Please confirm your password\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction CreatepasswordComponent_mat_error_21_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \"Passwords don't match\");\n    i0.ɵɵelementEnd();\n  }\n}\nclass CreatepasswordComponent {\n  constructor(formBuilder) {\n    this.formBuilder = formBuilder;\n    this.minPw = 8;\n  }\n  ngOnInit() {\n    this.formGroup = this.formBuilder.group({\n      password: ['', [Validators.required, Validators.minLength(this.minPw)]],\n      password2: ['', [Validators.required]]\n    }, {\n      validator: passwordMatchValidator\n    });\n    this.createpasswordForm = this.formBuilder.group({}); // Initialize createpasswordForm\n  }\n  /* Shorthands for form controls (used from within template) */\n  get password() {\n    return this.formGroup.get('password');\n  }\n  get password2() {\n    return this.formGroup.get('password2');\n  }\n  onCreatepassword() {\n    // Implement the onCreatepassword method\n  }\n  /* Called on each input in either password field */\n  onPasswordInput() {\n    if (this.formGroup.hasError('passwordMismatch') && this.password2) this.password2.setErrors([{\n      'passwordMismatch': true\n    }]);else if (this.password2) this.password2.setErrors(null);\n  }\n}\nCreatepasswordComponent.ɵfac = function CreatepasswordComponent_Factory(t) {\n  return new (t || CreatepasswordComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder));\n};\nCreatepasswordComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: CreatepasswordComponent,\n  selectors: [[\"app-createpassword\"]],\n  decls: 26,\n  vars: 5,\n  consts: [[\"color\", \"primary\", 1, \"app-header\"], [\"href\", \"\", \"target\", \"_blank\", 1, \"positronx\"], [1, \"nav-tool-items\"], [\"mat-button\", \"\", \"mat-raised-button\", \"\", \"routerLink\", \"/login\", \"routerLinkActive\", \"active\"], [1, \"header\"], [\"name\", \"createpasswordForm\", 3, \"formGroup\", \"ngSubmit\"], [1, \"email-input\"], [\"matInput\", \"\", \"type\", \"password\", \"placeholder\", \"Password\", \"formControlName\", \"password\", 3, \"input\"], [4, \"ngIf\"], [\"matInput\", \"\", \"type\", \"password\", \"placeholder\", \"Confirm password\", \"formControlName\", \"password2\", 3, \"input\"], [\"mat-flat-button\", \"\", \"color\", \"primary\", 1, \"blink\"]],\n  template: function CreatepasswordComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"mat-toolbar\", 0)(1, \"div\")(2, \"a\", 1);\n      i0.ɵɵtext(3, \"STAL Technologies\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(4, \"span\", 2)(5, \"a\", 3);\n      i0.ɵɵtext(6, \"Login\");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(7, \"mat-card\")(8, \"mat-card-content\")(9, \"div\", 4)(10, \"h2\");\n      i0.ɵɵtext(11, \"Welcome Back! Please login to proceed\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(12, \"form\", 5);\n      i0.ɵɵlistener(\"ngSubmit\", function CreatepasswordComponent_Template_form_ngSubmit_12_listener() {\n        return ctx.onCreatepassword();\n      });\n      i0.ɵɵelementStart(13, \"div\", 6)(14, \"mat-form-field\")(15, \"input\", 7);\n      i0.ɵɵlistener(\"input\", function CreatepasswordComponent_Template_input_input_15_listener() {\n        return ctx.onPasswordInput();\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(16, CreatepasswordComponent_mat_error_16_Template, 2, 0, \"mat-error\", 8);\n      i0.ɵɵtemplate(17, CreatepasswordComponent_mat_error_17_Template, 2, 1, \"mat-error\", 8);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(18, \"mat-form-field\")(19, \"input\", 9);\n      i0.ɵɵlistener(\"input\", function CreatepasswordComponent_Template_input_input_19_listener() {\n        return ctx.onPasswordInput();\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(20, CreatepasswordComponent_mat_error_20_Template, 2, 0, \"mat-error\", 8);\n      i0.ɵɵtemplate(21, CreatepasswordComponent_mat_error_21_Template, 2, 0, \"mat-error\", 8);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(22, \"button\", 10);\n      i0.ɵɵtext(23, \"Login\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(24, \"button\", 10);\n      i0.ɵɵtext(25, \"Forgot Password\");\n      i0.ɵɵelementEnd()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(12);\n      i0.ɵɵproperty(\"formGroup\", ctx.formGroup);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngIf\", ctx.password.hasError(\"required\"));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.password.hasError(\"minlength\"));\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngIf\", ctx.password2.hasError(\"required\"));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.password2.invalid && !ctx.password2.hasError(\"required\"));\n    }\n  },\n  dependencies: [i2.NgIf, i3.RouterLink, i3.RouterLinkActive, i4.MatAnchor, i4.MatButton, i5.MatCard, i5.MatCardContent, i6.MatInput, i7.MatFormField, i7.MatError, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, i8.MatToolbar],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});\nexport { CreatepasswordComponent };\nexport const passwordMatchValidator = formGroup => {\n  if (formGroup.get('password').value === formGroup.get('password2').value) return null;else return {\n    passwordMismatch: true\n  };\n};","map":{"version":3,"names":["Validators","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate1","ctx_r1","minPw","CreatepasswordComponent","constructor","formBuilder","ngOnInit","formGroup","group","password","required","minLength","password2","validator","passwordMatchValidator","createpasswordForm","get","onCreatepassword","onPasswordInput","hasError","setErrors","ɵɵdirectiveInject","i1","FormBuilder","selectors","decls","vars","consts","template","CreatepasswordComponent_Template","rf","ctx","ɵɵlistener","CreatepasswordComponent_Template_form_ngSubmit_12_listener","CreatepasswordComponent_Template_input_input_15_listener","ɵɵtemplate","CreatepasswordComponent_mat_error_16_Template","CreatepasswordComponent_mat_error_17_Template","CreatepasswordComponent_Template_input_input_19_listener","CreatepasswordComponent_mat_error_20_Template","CreatepasswordComponent_mat_error_21_Template","ɵɵproperty","invalid","value","passwordMismatch"],"sources":["C:\\Users\\Kimz\\Videos\\angular\\demo\\src\\app\\createpassword\\createpassword.component.ts","C:\\Users\\Kimz\\Videos\\angular\\demo\\src\\app\\createpassword\\createpassword.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators, ValidatorFn, ValidationErrors } from '@angular/forms';\n\n@Component({\n  selector: 'app-createpassword',\n  templateUrl: './createpassword.component.html',\n  styleUrls: ['./createpassword.component.scss']\n})\nexport class CreatepasswordComponent implements OnInit {\n  minPw = 8;\n  formGroup!: FormGroup;\n  createpasswordForm!: FormGroup; // Added createpasswordForm property\n\n  constructor(private formBuilder: FormBuilder) { }\n\n  ngOnInit() {\n    this.formGroup = this.formBuilder.group({\n      password: ['', [Validators.required, Validators.minLength(this.minPw)]],\n      password2: ['', [Validators.required]]\n    }, { validator: passwordMatchValidator });\n\n    this.createpasswordForm = this.formBuilder.group({}); // Initialize createpasswordForm\n  }\n\n  /* Shorthands for form controls (used from within template) */\n  get password() { return this.formGroup.get('password'); }\n  get password2() { return this.formGroup.get('password2'); }\n\n  onCreatepassword() {\n    // Implement the onCreatepassword method\n  }\n\n  /* Called on each input in either password field */\n  onPasswordInput() {\n    if (this.formGroup.hasError('passwordMismatch') && this.password2)\n      this.password2.setErrors([{ 'passwordMismatch': true }]);\n    else if (this.password2)\n      this.password2.setErrors(null);\n  }\n}\n\nexport const passwordMatchValidator: ValidatorFn = (formGroup: FormGroup): ValidationErrors | null => {\n  if (formGroup.get('password')!.value === formGroup.get('password2')!.value)\n    return null;\n  else\n    return { passwordMismatch: true };\n};\n","<mat-toolbar color=\"primary\" class=\"app-header\">\n    <div><a href=\"\" target=\"_blank\" class=\"positronx\">STAL Technologies</a></div>\n    <span class=\"nav-tool-items\">\n      <a mat-button mat-raised-button routerLink=\"/login\" routerLinkActive=\"active\">Login</a>\n    </span>\n  </mat-toolbar>\n  <mat-card>\n    <mat-card-content>\n      <div class=\"header\">\n        <h2>Welcome Back! Please login to proceed</h2>\n      </div>\n      <form (ngSubmit)=\"onCreatepassword()\" name=\"createpasswordForm\" [formGroup]=\"formGroup\">\n        <div class=\"email-input\">\n          <mat-form-field>\n            <input matInput type=\"password\" placeholder=\"Password\" formControlName=\"password\" (input)=\"onPasswordInput()\">\n            <mat-error *ngIf=\"password.hasError('required')\">Password is required</mat-error>\n            <mat-error *ngIf=\"password.hasError('minlength')\">Password must have at least {{minPw}} characters</mat-error>\n          </mat-form-field>\n  \n          <mat-form-field>\n            <input matInput type=\"password\" placeholder=\"Confirm password\" formControlName=\"password2\" (input)=\"onPasswordInput()\">\n            <mat-error *ngIf=\"password2.hasError('required')\">Please confirm your password</mat-error>\n            <mat-error *ngIf=\"password2.invalid && !password2.hasError('required')\">Passwords don't match</mat-error>\n          </mat-form-field>\n        </div>\n        <button mat-flat-button color=\"primary\" class=\"blink\">Login</button>\n        <button mat-flat-button color=\"primary\" class=\"blink\">Forgot Password</button>\n      </form>\n    </mat-card-content>\n  </mat-card>\n  "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}